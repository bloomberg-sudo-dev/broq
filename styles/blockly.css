.injectionDiv {
  height: 100%;
  position: relative;
  overflow: hidden;
  touch-action: none;
}

.blocklyWidgetDiv {
  display: none;
  position: absolute;
  z-index: 99999;
}

.blocklyTooltipDiv {
  background-color: #ffffc7;
  border: 1px solid #ddc;
  box-shadow: 4px 4px 20px 1px rgba(0,0,0,.15);
  color: #000;
  display: none;
  font-size: 9pt;
  opacity: .9;
  padding: 2px;
  position: absolute;
  z-index: 100000;
}

.blocklyDropDownDiv {
  position: absolute;
  left: 0;
  top: 0;
  z-index: 1000;
  display: none;
  border: 1px solid;
  border-radius: 4px;
  padding: 4px;
  background-color: #fff;
}

.blocklyDropDownContent {
  max-height: 300px;
  overflow: auto;
  overflow-x: hidden;
}

.blocklyDropDownArrow {
  position: absolute;
  left: 0;
  top: 0;
  width: 16px;
  height: 16px;
  z-index: -1;
  background-color: inherit;
  border-color: inherit;
}

.blocklyResizeSE {
  cursor: se-resize;
  fill: #aaa;
}

.blocklyResizeSW {
  cursor: sw-resize;
  fill: #aaa;
}

.blocklyResizeLine {
  stroke: #515A5A;
  stroke-width: 1;
}

.blocklyHighlightedConnectionPath {
  fill: none;
  stroke: #fc3;
  stroke-width: 4px;
}

.blocklyPath {
  stroke-width: 1px;
}

.blocklySelected>.blocklyPath {
  stroke: #fc3;
  stroke-width: 3px;
}

.blocklySelected>.blocklyPathLight {
  display: none;
}

.blocklyDragging>.blocklyPath,
.blocklyDragging>.blocklyPathLight {
  fill-opacity: .8;
  stroke-opacity: .8;
}

.blocklyDragging>.blocklyPathDark {
  display: none;
}

.blocklyDisabled>.blocklyPath {
  fill-opacity: .5;
  stroke-opacity: .5;
}

.blocklyDisabled>.blocklyPathLight,
.blocklyDisabled>.blocklyPathDark {
  display: none;
}

.blocklyText {
  cursor: default;
  fill: #fff;
  font-family: sans-serif;
  font-size: 11pt;
}

.blocklyNonEditableText>text {
  pointer-events: none;
}

.blocklyNonEditableText>rect,
.blocklyEditableText>rect {
  fill: #fff;
  fill-opacity: .6;
}

.blocklyNonEditableText>text,
.blocklyEditableText>text {
  fill: #000;
}

.blocklyEditableText:hover>rect {
  stroke: #fff;
  stroke-width: 2;
}

.blocklyBubbleText {
  fill: #000;
}

.blocklyFlyout {
  position: absolute;
  z-index: 20;
}

.blocklyFlyoutButton {
  fill: #888;
  cursor: default;
}

.blocklyFlyoutButtonShadow {
  fill: #666;
}

.blocklyFlyoutButton:hover {
  fill: #aaa;
}

.blocklyFlyoutLabel {
  cursor: default;
}

.blocklyFlyoutLabelBackground {
  opacity: 0;
}

.blocklyFlyoutLabelText {
  fill: #000;
}

.blocklySvg {
  background-color: #fff;
  outline: none;
  overflow: hidden;
  position: absolute;
  display: block;
}

.blocklyScrollbarHandle {
  fill: #ccc;
  fill-opacity: .8;
  stroke: #000;
  stroke-width: 1px;
  stroke-opacity: .2;
}

.blocklyScrollbarBackground {
  fill: #fff;
  stroke: #e4e4e4;
  stroke-width: 1px;
}

.blocklyZoom>image {
  opacity: .4;
}

.blocklyZoom>image:hover {
  opacity: .6;
}

.blocklyZoom>image:active {
  opacity: .8;
}

/* Darken or lighten toolbox categories. */
.blocklyTreeRow:not(.blocklyTreeSelected):hover {
  background-color: rgba(255, 255, 255, .2);
}

.blocklyToolboxDiv {
  background-color: #f9f9f9;
  overflow-x: visible;
  overflow-y: auto;
  padding: 0.5em;
  position: absolute;
  z-index: 70;
  -webkit-tap-highlight-color: transparent;
}

.blocklyTreeRoot {
  padding: 4px 0;
}

.blocklyTreeRow {
  height: 22px;
  line-height: 22px;
  margin-bottom: 3px;
  padding-right: 8px;
  white-space: nowrap;
}

.blocklyToolboxDelete {
  cursor: not-allowed;
}

.blocklyToolboxGrab {
  cursor: move;
  cursor: grab;
}

.blocklyDragging>.blocklyPath,
.blocklyDragging>.blocklyPathLight {
  fill-opacity: 1.0;
  stroke-opacity: 1.0;
}

.blocklyDragging {
  display: block;
  cursor: grabbing;
}

.blocklyDisabled .blocklyPath {
  fill-opacity: .5;
  stroke-opacity: .5;
}

.blocklyInsertionMarker>.blocklyPath {
  stroke: none;
}

.blocklyText text {
  fill: #fff;
  font-family: inherit;
  font-size: inherit;
}

/* Variable Reporter Block Styling - Circular appearance */
.blocklyPath[data-block-type="variable_reporter_block"],
g[data-block-type="variable_reporter_block"] .blocklyPath {
  rx: 20px !important;
  ry: 20px !important;
  border-radius: 20px !important;
}

/* Make Variable Reporter blocks appear more rounded */
g[data-id*="variable_reporter_block"] .blocklyPath,
.blocklyBlockBackground[data-block-type="variable_reporter_block"] {
  rx: 25px;
  ry: 25px;
  border-radius: 25px;
}

/* Additional styling for variable reporter blocks */
.blocklyPath[fill="#FF6B35"] {
  rx: 20px;
  ry: 20px;
  stroke-width: 2px;
  stroke: #E55A2B;
}

/* Make the variable reporter blocks smaller and more circular */
g.blocklyDraggable[data-id*="variable_reporter"] .blocklyPath {
  rx: 30px !important;
  ry: 30px !important;
}

/* Ensure text in variable reporter blocks is centered */
g.blocklyDraggable[data-id*="variable_reporter"] .blocklyText {
  text-anchor: middle;
  dominant-baseline: central;
}

/* Operator Block Styling - Circular appearance */
/* Math Operators - Light Blue */
.blocklyPath[fill="#87CEEB"],
g[data-id*="math_"] .blocklyPath {
  rx: 20px !important;
  ry: 20px !important;
  stroke-width: 2px;
  stroke: #5F9EA0;
}

/* Comparison and Logical Operators - Green */
.blocklyPath[fill="#228B22"],
g[data-id*="comparison_"] .blocklyPath,
g[data-id*="logical_"] .blocklyPath {
  rx: 20px !important;
  ry: 20px !important;
  stroke-width: 2px;
  stroke: #006400;
}

/* String Operators - Purple */
.blocklyPath[fill="#9932CC"],
g[data-id*="string_"] .blocklyPath {
  rx: 20px !important;
  ry: 20px !important;
  stroke-width: 2px;
  stroke: #800080;
}

/* Make all operator blocks appear more rounded */
g[data-id*="math_"] .blocklyPath,
g[data-id*="comparison_"] .blocklyPath,
g[data-id*="logical_"] .blocklyPath,
g[data-id*="string_"] .blocklyPath {
  rx: 25px;
  ry: 25px;
  border-radius: 25px;
}

/* Ensure text in operator blocks is centered */
g[data-id*="math_"] .blocklyText,
g[data-id*="comparison_"] .blocklyText,
g[data-id*="logical_"] .blocklyText,
g[data-id*="string_"] .blocklyText {
  text-anchor: middle;
  dominant-baseline: central;
}

/* Boolean operators (hexagonal blocks) - New boolean blocks that output Boolean type */
.blocklyPathDark[data-block-type*="boolean_"]:not([data-block-type*="block"]) path {
  stroke: #4CAF50 !important;
  stroke-width: 2px;
}

.blocklyPathLight[data-block-type*="boolean_"]:not([data-block-type*="block"]) path {
  fill: #E8F5E8 !important;
  stroke: #4CAF50 !important;
  stroke-width: 2px;
}

/* Boolean comparison operators */
.blocklyPathDark[data-block-type="boolean_equals_block"] path,
.blocklyPathDark[data-block-type="boolean_not_equals_block"] path,
.blocklyPathDark[data-block-type="boolean_greater_than_block"] path,
.blocklyPathDark[data-block-type="boolean_less_than_block"] path {
  stroke: #4CAF50 !important;
  fill: #2E7D32 !important;
}

.blocklyPathLight[data-block-type="boolean_equals_block"] path,
.blocklyPathLight[data-block-type="boolean_not_equals_block"] path,
.blocklyPathLight[data-block-type="boolean_greater_than_block"] path,
.blocklyPathLight[data-block-type="boolean_less_than_block"] path {
  fill: #E8F5E8 !important;
  stroke: #4CAF50 !important;
}

/* Boolean logical operators */
.blocklyPathDark[data-block-type="boolean_and_block"] path,
.blocklyPathDark[data-block-type="boolean_or_block"] path,
.blocklyPathDark[data-block-type="boolean_not_block"] path {
  stroke: #2196F3 !important;
  fill: #1565C0 !important;
}

.blocklyPathLight[data-block-type="boolean_and_block"] path,
.blocklyPathLight[data-block-type="boolean_or_block"] path,
.blocklyPathLight[data-block-type="boolean_not_block"] path {
  fill: #E3F2FD !important;
  stroke: #2196F3 !important;
}

/* Make boolean blocks hexagonal */
.blocklyBlock[data-output-type="Boolean"] .blocklyPath {
  border-radius: 0 !important;
}

/* Text centering for boolean blocks */
.blocklyText[data-block-type*="boolean_"] {
  text-anchor: middle !important;
  alignment-baseline: central !important;
} 